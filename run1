#!/bin/bash

cd "$(dirname "$0")"

. etc/compare_files.sh
. etc/format.sh
. etc/run_tests.sh

declare -xgr BLUECOLOR='\033[1;34;49m%s\033[m'
declare -xgr REDCOLOR='\033[1;31;49m%s\033[m'
declare -xgr YELLOWCOLOR='\033[1;33;49m%s\033[m'
declare -xgr GREENCOLOR='\033[1;32;49m%s\033[m'
declare -xgr SEPARATOR='================================================================================'

printf '%s\n' 'Formatting code files before compiling...'
format_files

printf '%s\n' 'Compiling C program...'
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  gcc -W -Wall -Wextra -pedantic src/sorting/main.c -o main.out
  # Using all kinds of warnings to avoid logical errors

  printf '%s\n' 'Executing program...'
  ./main.out
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
  gcc -o main64_sort.exe src/sorting/main.c 2> /dev/null ||
    printf '%s\n' 'Executing program...'
  ./main.exe
else
  printf 'OS not recognized!\n'
  exit 1
fi

# Descomentar a linha abaixo para simular uma ordenação errada
# printf "Not\nSorted\nFile\n" > output/sorting/mes_1/bubble_sort.txt

read -r -p "Would you like to perform tests? [y/N] " response
if [[ "$?" -ne 0 || -z "$response" ]]; then
  response='no'
fi

if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
  printf '%s\n' 'Performing tests...'
  check=$(perform_tests)
  printf '\n%s\n\n' "$check"
fi

printf '%s\n' 'Checking if new files are correctly sorted...'
check=$(compare)

if [[ "$check" == '0' ]]; then
  printf '%s\n' 'Generating data graphs...'

  cd data
  python3 data_generator.py
  cd ..

  printf '%s\n' 'Done!'
else
  printf "\n$REDCOLOR\n" 'Error: Execution aborted due to errors in sorting:'
  printf '%s\n' "$check"

  exit 1
fi
